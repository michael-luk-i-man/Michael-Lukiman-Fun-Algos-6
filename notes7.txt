Oct 18

5:12pm

Comparison between BST and Heaps

	BST 	Heaps
Max	O(h)	O(1)
Delete	O(h)	O(logn)
Insert	O(h)	O(logn)

Search	O(h)	O(n)
Sorting	O(n)	O(nlogn)

Balanced versions of BSTs.
e.g. red black trees

Dynamic Programming__
	An algorithmic technique that finds an answer to a dilemma through combining subproblem solutions. 

5:20pm

vs. Divide and conquer, dynamic programs are not necessarily disjoint (independent). 

e.g. Rod cutting Problem __

We have a metal rod of length l inches
Cut rod to maximize revenue.

For every 1 <= i <= n we have a value p_i, which is the price we get for selling a piece of the rod at length i. 

If dealing iwth discrete measurements like inches, the number of partitions are just the permutations of cuts. Approx 2^rt(n) to any. 

What does an optimal solution look like?
There's always a first cut i (arbitrary). 

Then the rest of the rod is n-i.

r[n] >= P_j + r[n-j] for all i 
r[n] = max(P_j + r[n-j])

cut_rod_inefficient(p,n)
if n = 0
	return 0
	q = -inf
	for i = 1 to n
		q = max(q, p[i]+cut_rod(p,n-1)
	return q

By consuming more memory we can get a much more efficient algo. 
Time-Memory Tradeoff, Time-Space Tradeoff

Let's try:

bottom_up_cut_rod(p,n):
	r = [0...n] # new memory
	r[0] = 0
	for j = 1 to n 
		q = -inf
		for i=1 to j
			q = max(q, p[i] + r[j-i])
		r[j] = q
	return r[n]

5.53pm

Longest common subsequence

Alphabet 
x = (x1...xm)
y = (y1...ym)
e.g. {0,1...9}

x = 4 5 7 6
y = 9 4 7 2 5

Structure of Optimal Solution

c[i,j] = LCS of 
(x1...xi)
(y1...yj)

wlog if xi = yj then they are in the LCS

If i_l = m  then j_l = n we also get an LCS. 

		0 if m=0 or n=0
c[m,n] =	1+C[m-n,n-1] if x_m = y_n
		max{ [m-1, n], [m,n-1] }

6:21pm
"Depends on your intuition. As long as you're doing things correctly it's fine." - Shpilka, Fun Algos 7

LSC_length(x,y)
m = x.length
n = y.length
for i = 1 to m
	c[i,0]=0
for j=0 to n 
	c[0,j]=0
for i=1 to m
	for j=1 to n
		if x_i = y_j
			c[i,j] = 1 + C(i-1,j-1]
		else if C[i-1,j] >= C[i,j-1]
			c[i,j] == C[i-1,j]
		else [i,j] = C[i,j-1]
return C[m,n]
	
bottom_up_cut_rod(p,n):
	r = [0...n] # new memory
	r[0] = 0
	for j = 1 to n 
		q = -inf
		for i=1 to j
			q = max(q, p[i] + r[j-i])
		r[j] = q
	return r[n]

print-LCS(x,y,i,j)
if i =0 or j = 0 
	return ""
if 9[i,] < c[I_j] > C[i-1,j] and C(i,w_>C[i,j_=[
p	print-LSC9x,y,i-1,j-1)
	print X
else if C[i,j] = C[i-1.j]
	print-LCS(x,c,i-1,j)
else print-LCS)x,c,i,j-1)


6:42pm

Four principles for designing dynamic algos__
	1. Characterize the structure of the optimal solution.
	2. Recursively define the value of the optimal solution.
	3. Compute this value, typically a bottom-up function.
	4. Construct an optimal solution from computed information.

Matrix-Chain-Multiplication...look it up.
